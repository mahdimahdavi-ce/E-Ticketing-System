/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { EnumTicketGender } from "./EnumTicketGender";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { FloatFilter } from "../../util/FloatFilter";
import { TravelWhereUniqueInput } from "../../travel/base/TravelWhereUniqueInput";
import { UserTicketWhereUniqueInput } from "../../userTicket/base/UserTicketWhereUniqueInput";

@InputType()
class TicketWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  firstName?: StringFilter;

  @ApiProperty({
    required: false,
    enum: EnumTicketGender,
  })
  @IsEnum(EnumTicketGender)
  @IsOptional()
  @Field(() => EnumTicketGender, {
    nullable: true,
  })
  gender?: "Male" | "Female";

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  lastName?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  nationalId?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  phoneNumber?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: FloatFilter,
  })
  @Type(() => FloatFilter)
  @IsOptional()
  @Field(() => FloatFilter, {
    nullable: true,
  })
  seatNumber?: FloatFilter;

  @ApiProperty({
    required: false,
    type: () => TravelWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => TravelWhereUniqueInput)
  @IsOptional()
  @Field(() => TravelWhereUniqueInput, {
    nullable: true,
  })
  travelId?: TravelWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: () => UserTicketWhereUniqueInput,
  })
  @ValidateNested()
  @Type(() => UserTicketWhereUniqueInput)
  @IsOptional()
  @Field(() => UserTicketWhereUniqueInput, {
    nullable: true,
  })
  userId?: UserTicketWhereUniqueInput;

  @ApiProperty({
    required: false,
    type: FloatFilter,
  })
  @Type(() => FloatFilter)
  @IsOptional()
  @Field(() => FloatFilter, {
    nullable: true,
  })
  vehicleId?: FloatFilter;
}

export { TicketWhereInput as TicketWhereInput };
