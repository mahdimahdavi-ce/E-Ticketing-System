/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateSeatArgs } from "./CreateSeatArgs";
import { UpdateSeatArgs } from "./UpdateSeatArgs";
import { DeleteSeatArgs } from "./DeleteSeatArgs";
import { SeatFindManyArgs } from "./SeatFindManyArgs";
import { SeatFindUniqueArgs } from "./SeatFindUniqueArgs";
import { Seat } from "./Seat";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { SeatService } from "../seat.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Seat)
export class SeatResolverBase {
  constructor(
    protected readonly service: SeatService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Seat",
    action: "read",
    possession: "any",
  })
  async _seatsMeta(
    @graphql.Args() args: SeatFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Seat])
  @nestAccessControl.UseRoles({
    resource: "Seat",
    action: "read",
    possession: "any",
  })
  async seats(@graphql.Args() args: SeatFindManyArgs): Promise<Seat[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Seat, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Seat",
    action: "read",
    possession: "own",
  })
  async seat(@graphql.Args() args: SeatFindUniqueArgs): Promise<Seat | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Seat)
  @nestAccessControl.UseRoles({
    resource: "Seat",
    action: "create",
    possession: "any",
  })
  async createSeat(@graphql.Args() args: CreateSeatArgs): Promise<Seat> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        vehicleId: args.data.vehicleId
          ? {
              connect: args.data.vehicleId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Seat)
  @nestAccessControl.UseRoles({
    resource: "Seat",
    action: "update",
    possession: "any",
  })
  async updateSeat(@graphql.Args() args: UpdateSeatArgs): Promise<Seat | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          vehicleId: args.data.vehicleId
            ? {
                connect: args.data.vehicleId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Seat)
  @nestAccessControl.UseRoles({
    resource: "Seat",
    action: "delete",
    possession: "any",
  })
  async deleteSeat(@graphql.Args() args: DeleteSeatArgs): Promise<Seat | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vehicle, {
    nullable: true,
    name: "vehicleId",
  })
  @nestAccessControl.UseRoles({
    resource: "Vehicle",
    action: "read",
    possession: "any",
  })
  async resolveFieldVehicleId(
    @graphql.Parent() parent: Seat
  ): Promise<Vehicle | null> {
    const result = await this.service.getVehicleId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
