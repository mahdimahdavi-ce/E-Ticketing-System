/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateUserTicketArgs } from "./CreateUserTicketArgs";
import { UpdateUserTicketArgs } from "./UpdateUserTicketArgs";
import { DeleteUserTicketArgs } from "./DeleteUserTicketArgs";
import { UserTicketFindManyArgs } from "./UserTicketFindManyArgs";
import { UserTicketFindUniqueArgs } from "./UserTicketFindUniqueArgs";
import { UserTicket } from "./UserTicket";
import { Ticket } from "../../ticket/base/Ticket";
import { UserTicketService } from "../userTicket.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => UserTicket)
export class UserTicketResolverBase {
  constructor(
    protected readonly service: UserTicketService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "UserTicket",
    action: "read",
    possession: "any",
  })
  async _userTicketsMeta(
    @graphql.Args() args: UserTicketFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [UserTicket])
  @nestAccessControl.UseRoles({
    resource: "UserTicket",
    action: "read",
    possession: "any",
  })
  async userTickets(
    @graphql.Args() args: UserTicketFindManyArgs
  ): Promise<UserTicket[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => UserTicket, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "UserTicket",
    action: "read",
    possession: "own",
  })
  async userTicket(
    @graphql.Args() args: UserTicketFindUniqueArgs
  ): Promise<UserTicket | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserTicket)
  @nestAccessControl.UseRoles({
    resource: "UserTicket",
    action: "create",
    possession: "any",
  })
  async createUserTicket(
    @graphql.Args() args: CreateUserTicketArgs
  ): Promise<UserTicket> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        ticketId: args.data.ticketId
          ? {
              connect: args.data.ticketId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => UserTicket)
  @nestAccessControl.UseRoles({
    resource: "UserTicket",
    action: "update",
    possession: "any",
  })
  async updateUserTicket(
    @graphql.Args() args: UpdateUserTicketArgs
  ): Promise<UserTicket | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          ticketId: args.data.ticketId
            ? {
                connect: args.data.ticketId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => UserTicket)
  @nestAccessControl.UseRoles({
    resource: "UserTicket",
    action: "delete",
    possession: "any",
  })
  async deleteUserTicket(
    @graphql.Args() args: DeleteUserTicketArgs
  ): Promise<UserTicket | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Ticket, {
    nullable: true,
    name: "ticketId",
  })
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "read",
    possession: "any",
  })
  async resolveFieldTicketId(
    @graphql.Parent() parent: UserTicket
  ): Promise<Ticket | null> {
    const result = await this.service.getTicketId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
