/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import * as apollo from "apollo-server-express";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { CreateTravelArgs } from "./CreateTravelArgs";
import { UpdateTravelArgs } from "./UpdateTravelArgs";
import { DeleteTravelArgs } from "./DeleteTravelArgs";
import { TravelFindManyArgs } from "./TravelFindManyArgs";
import { TravelFindUniqueArgs } from "./TravelFindUniqueArgs";
import { Travel } from "./Travel";
import { TicketFindManyArgs } from "../../ticket/base/TicketFindManyArgs";
import { Ticket } from "../../ticket/base/Ticket";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { TravelService } from "../travel.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Travel)
export class TravelResolverBase {
  constructor(
    protected readonly service: TravelService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "read",
    possession: "any",
  })
  async _travelsMeta(
    @graphql.Args() args: TravelFindManyArgs
  ): Promise<MetaQueryPayload> {
    const results = await this.service.count({
      ...args,
      skip: undefined,
      take: undefined,
    });
    return {
      count: results,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Travel])
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "read",
    possession: "any",
  })
  async travels(@graphql.Args() args: TravelFindManyArgs): Promise<Travel[]> {
    return this.service.findMany(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Travel, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "read",
    possession: "own",
  })
  async travel(
    @graphql.Args() args: TravelFindUniqueArgs
  ): Promise<Travel | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Travel)
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "create",
    possession: "any",
  })
  async createTravel(@graphql.Args() args: CreateTravelArgs): Promise<Travel> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        vehicleId: args.data.vehicleId
          ? {
              connect: args.data.vehicleId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Travel)
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "update",
    possession: "any",
  })
  async updateTravel(
    @graphql.Args() args: UpdateTravelArgs
  ): Promise<Travel | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          vehicleId: args.data.vehicleId
            ? {
                connect: args.data.vehicleId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Travel)
  @nestAccessControl.UseRoles({
    resource: "Travel",
    action: "delete",
    possession: "any",
  })
  async deleteTravel(
    @graphql.Args() args: DeleteTravelArgs
  ): Promise<Travel | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new apollo.ApolloError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Ticket], { name: "ticketId" })
  @nestAccessControl.UseRoles({
    resource: "Ticket",
    action: "read",
    possession: "any",
  })
  async resolveFieldTicketId(
    @graphql.Parent() parent: Travel,
    @graphql.Args() args: TicketFindManyArgs
  ): Promise<Ticket[]> {
    const results = await this.service.findTicketId(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Vehicle, {
    nullable: true,
    name: "vehicleId",
  })
  @nestAccessControl.UseRoles({
    resource: "Vehicle",
    action: "read",
    possession: "any",
  })
  async resolveFieldVehicleId(
    @graphql.Parent() parent: Travel
  ): Promise<Vehicle | null> {
    const result = await this.service.getVehicleId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
