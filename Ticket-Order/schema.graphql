# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input BooleanNullableFilter {
  equals: Boolean
  not: Boolean
}

input Credentials {
  password: String!
  username: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

enum EnumTicketGender {
  Female
  Male
}

enum EnumTravelCategory {
  Airplane
  Bus
  Train
}

enum EnumVehicleCategory {
  Airplaine
  Bus
  Train
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

input FloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: Float
  notIn: [Float!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type MetaQueryPayload {
  count: Float!
}

type Mutation {
  createSeat(data: SeatCreateInput!): Seat!
  createTicket(data: TicketCreateInput!): Ticket!
  createTravel(data: TravelCreateInput!): Travel!
  createUser(data: UserCreateInput!): User!
  createUserTicket(data: UserTicketCreateInput!): UserTicket!
  createVehicle(data: VehicleCreateInput!): Vehicle!
  deleteSeat(where: SeatWhereUniqueInput!): Seat!
  deleteTicket(where: TicketWhereUniqueInput!): Ticket!
  deleteTravel(where: TravelWhereUniqueInput!): Travel!
  deleteUser(where: UserWhereUniqueInput!): User!
  deleteUserTicket(where: UserTicketWhereUniqueInput!): UserTicket!
  deleteVehicle(where: VehicleWhereUniqueInput!): Vehicle!
  login(credentials: Credentials!): UserInfo!
  updateSeat(data: SeatUpdateInput!, where: SeatWhereUniqueInput!): Seat!
  updateTicket(data: TicketUpdateInput!, where: TicketWhereUniqueInput!): Ticket!
  updateTravel(data: TravelUpdateInput!, where: TravelWhereUniqueInput!): Travel!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  updateUserTicket(data: UserTicketUpdateInput!, where: UserTicketWhereUniqueInput!): UserTicket!
  updateVehicle(data: VehicleUpdateInput!, where: VehicleWhereUniqueInput!): Vehicle!
}

type Query {
  _seatsMeta(orderBy: [SeatOrderByInput!], skip: Float, take: Float, where: SeatWhereInput): MetaQueryPayload!
  _ticketsMeta(orderBy: [TicketOrderByInput!], skip: Float, take: Float, where: TicketWhereInput): MetaQueryPayload!
  _travelsMeta(orderBy: [TravelOrderByInput!], skip: Float, take: Float, where: TravelWhereInput): MetaQueryPayload!
  _userTicketsMeta(orderBy: [UserTicketOrderByInput!], skip: Float, take: Float, where: UserTicketWhereInput): MetaQueryPayload!
  _usersMeta(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): MetaQueryPayload!
  _vehiclesMeta(orderBy: [VehicleOrderByInput!], skip: Float, take: Float, where: VehicleWhereInput): MetaQueryPayload!
  seat(where: SeatWhereUniqueInput!): Seat
  seats(orderBy: [SeatOrderByInput!], skip: Float, take: Float, where: SeatWhereInput): [Seat!]!
  ticket(where: TicketWhereUniqueInput!): Ticket
  tickets(orderBy: [TicketOrderByInput!], skip: Float, take: Float, where: TicketWhereInput): [Ticket!]!
  travel(where: TravelWhereUniqueInput!): Travel
  travels(orderBy: [TravelOrderByInput!], skip: Float, take: Float, where: TravelWhereInput): [Travel!]!
  user(where: UserWhereUniqueInput!): User
  userInfo: UserInfo!
  userTicket(where: UserTicketWhereUniqueInput!): UserTicket
  userTickets(orderBy: [UserTicketOrderByInput!], skip: Float, take: Float, where: UserTicketWhereInput): [UserTicket!]!
  users(orderBy: [UserOrderByInput!], skip: Float, take: Float, where: UserWhereInput): [User!]!
  vehicle(where: VehicleWhereUniqueInput!): Vehicle
  vehicles(orderBy: [VehicleOrderByInput!], skip: Float, take: Float, where: VehicleWhereInput): [Vehicle!]!
}

enum QueryMode {
  Default
  Insensitive
}

type Seat {
  createdAt: DateTime!
  id: String!
  isReserved: Boolean
  seatNumber: Float
  updatedAt: DateTime!
  vehicleId: Vehicle
}

input SeatCreateInput {
  isReserved: Boolean
  seatNumber: Float
  vehicleId: VehicleWhereUniqueInput
}

input SeatCreateNestedManyWithoutVehiclesInput {
  connect: [SeatWhereUniqueInput!]
}

input SeatListRelationFilter {
  every: SeatWhereInput
  none: SeatWhereInput
  some: SeatWhereInput
}

input SeatOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  isReserved: SortOrder
  seatNumber: SortOrder
  updatedAt: SortOrder
  vehicleIdId: SortOrder
}

input SeatUpdateInput {
  isReserved: Boolean
  seatNumber: Float
  vehicleId: VehicleWhereUniqueInput
}

input SeatUpdateManyWithoutVehiclesInput {
  connect: [SeatWhereUniqueInput!]
  disconnect: [SeatWhereUniqueInput!]
  set: [SeatWhereUniqueInput!]
}

input SeatWhereInput {
  id: StringFilter
  isReserved: BooleanNullableFilter
  seatNumber: FloatNullableFilter
  vehicleId: VehicleWhereUniqueInput
}

input SeatWhereUniqueInput {
  id: String!
}

enum SortOrder {
  Asc
  Desc
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: String
  notIn: [String!]
  startsWith: String
}

type Ticket {
  createdAt: DateTime!
  firstName: String!
  gender: EnumTicketGender
  id: String!
  lastName: String!
  nationalId: String!
  phoneNumber: String
  seatNumber: Float!
  travelId: Travel
  updatedAt: DateTime
  userId: UserTicket
  vehicleId: Float!
}

input TicketCreateInput {
  firstName: String!
  gender: EnumTicketGender!
  lastName: String!
  nationalId: String!
  phoneNumber: String
  seatNumber: Float!
  travelId: TravelWhereUniqueInput
  userId: UserTicketWhereUniqueInput
  vehicleId: Float!
}

input TicketCreateNestedManyWithoutTravelsInput {
  connect: [TicketWhereUniqueInput!]
}

input TicketListRelationFilter {
  every: TicketWhereInput
  none: TicketWhereInput
  some: TicketWhereInput
}

input TicketOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  gender: SortOrder
  id: SortOrder
  lastName: SortOrder
  nationalId: SortOrder
  phoneNumber: SortOrder
  seatNumber: SortOrder
  travelIdId: SortOrder
  updatedAt: SortOrder
  userIdId: SortOrder
  vehicleId: SortOrder
}

input TicketUpdateInput {
  firstName: String
  gender: EnumTicketGender
  lastName: String
  nationalId: String
  phoneNumber: String
  seatNumber: Float
  travelId: TravelWhereUniqueInput
  userId: UserTicketWhereUniqueInput
  vehicleId: Float
}

input TicketUpdateManyWithoutTravelsInput {
  connect: [TicketWhereUniqueInput!]
  disconnect: [TicketWhereUniqueInput!]
  set: [TicketWhereUniqueInput!]
}

input TicketWhereInput {
  firstName: StringFilter
  gender: EnumTicketGender
  id: StringFilter
  lastName: StringFilter
  nationalId: StringFilter
  phoneNumber: StringNullableFilter
  seatNumber: FloatFilter
  travelId: TravelWhereUniqueInput
  userId: UserTicketWhereUniqueInput
  vehicleId: FloatFilter
}

input TicketWhereUniqueInput {
  id: String!
}

type Travel {
  basePrice: Float!
  category: EnumTravelCategory
  createdAt: DateTime!
  date: DateTime!
  destination: String!
  discount: String
  id: String!
  source: String!
  ticketId(orderBy: [TicketOrderByInput!], skip: Float, take: Float, where: TicketWhereInput): [Ticket!]!
  updatedAt: DateTime!
  vehicleId: Vehicle
}

input TravelCreateInput {
  basePrice: Float!
  category: EnumTravelCategory
  date: DateTime!
  destination: String!
  discount: String
  source: String!
  ticketId: TicketCreateNestedManyWithoutTravelsInput
  vehicleId: VehicleWhereUniqueInput
}

input TravelCreateNestedManyWithoutVehiclesInput {
  connect: [TravelWhereUniqueInput!]
}

input TravelListRelationFilter {
  every: TravelWhereInput
  none: TravelWhereInput
  some: TravelWhereInput
}

input TravelOrderByInput {
  basePrice: SortOrder
  category: SortOrder
  createdAt: SortOrder
  date: SortOrder
  destination: SortOrder
  discount: SortOrder
  id: SortOrder
  source: SortOrder
  updatedAt: SortOrder
  vehicleIdId: SortOrder
}

input TravelUpdateInput {
  basePrice: Float
  category: EnumTravelCategory
  date: DateTime
  destination: String
  discount: String
  source: String
  ticketId: TicketUpdateManyWithoutTravelsInput
  vehicleId: VehicleWhereUniqueInput
}

input TravelUpdateManyWithoutVehiclesInput {
  connect: [TravelWhereUniqueInput!]
  disconnect: [TravelWhereUniqueInput!]
  set: [TravelWhereUniqueInput!]
}

input TravelWhereInput {
  basePrice: FloatFilter
  category: EnumTravelCategory
  date: DateTimeFilter
  destination: StringFilter
  discount: StringNullableFilter
  id: StringFilter
  source: StringFilter
  ticketId: TicketListRelationFilter
  vehicleId: VehicleWhereUniqueInput
}

input TravelWhereUniqueInput {
  id: String!
}

type User {
  createdAt: DateTime!
  firstName: String
  id: String!
  lastName: String
  roles: JSON!
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  firstName: String
  lastName: String
  password: String!
  roles: JSON!
  username: String!
}

type UserInfo {
  accessToken: String
  id: String!
  roles: [String!]!
  username: String!
}

input UserOrderByInput {
  createdAt: SortOrder
  firstName: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  roles: SortOrder
  updatedAt: SortOrder
  username: SortOrder
}

type UserTicket {
  createdAt: DateTime!
  id: String!
  isCanceled: Boolean
  ticketId: Ticket
  updatedAt: DateTime!
  userId: String
}

input UserTicketCreateInput {
  isCanceled: Boolean
  ticketId: TicketWhereUniqueInput
  userId: String
}

input UserTicketOrderByInput {
  createdAt: SortOrder
  id: SortOrder
  isCanceled: SortOrder
  ticketIdId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input UserTicketUpdateInput {
  isCanceled: Boolean
  ticketId: TicketWhereUniqueInput
  userId: String
}

input UserTicketWhereInput {
  id: StringFilter
  isCanceled: BooleanNullableFilter
  ticketId: TicketWhereUniqueInput
  userId: StringNullableFilter
}

input UserTicketWhereUniqueInput {
  id: String!
}

input UserUpdateInput {
  firstName: String
  lastName: String
  password: String
  roles: JSON
  username: String
}

input UserWhereInput {
  firstName: StringNullableFilter
  id: StringFilter
  lastName: StringNullableFilter
  username: StringFilter
}

input UserWhereUniqueInput {
  id: String!
}

type Vehicle {
  category: EnumVehicleCategory
  color: String
  corporation: String
  createdAt: DateTime!
  id: String!
  numberOfSeats: Float
  numberPlate: String
  ownerNationalId: String
  seats(orderBy: [SeatOrderByInput!], skip: Float, take: Float, where: SeatWhereInput): [Seat!]!
  travelId(orderBy: [TravelOrderByInput!], skip: Float, take: Float, where: TravelWhereInput): [Travel!]!
  updatedAt: DateTime!
}

input VehicleCreateInput {
  category: EnumVehicleCategory
  color: String
  corporation: String
  numberOfSeats: Float
  numberPlate: String
  ownerNationalId: String
  seats: SeatCreateNestedManyWithoutVehiclesInput
  travelId: TravelCreateNestedManyWithoutVehiclesInput
}

input VehicleOrderByInput {
  category: SortOrder
  color: SortOrder
  corporation: SortOrder
  createdAt: SortOrder
  id: SortOrder
  numberOfSeats: SortOrder
  numberPlate: SortOrder
  ownerNationalId: SortOrder
  updatedAt: SortOrder
}

input VehicleUpdateInput {
  category: EnumVehicleCategory
  color: String
  corporation: String
  numberOfSeats: Float
  numberPlate: String
  ownerNationalId: String
  seats: SeatUpdateManyWithoutVehiclesInput
  travelId: TravelUpdateManyWithoutVehiclesInput
}

input VehicleWhereInput {
  category: EnumVehicleCategory
  color: StringNullableFilter
  corporation: StringNullableFilter
  id: StringFilter
  numberOfSeats: FloatNullableFilter
  numberPlate: StringNullableFilter
  ownerNationalId: StringNullableFilter
  seats: SeatListRelationFilter
  travelId: TravelListRelationFilter
}

input VehicleWhereUniqueInput {
  id: String!
}
